    // Touchscreen input
    {
        const LinuxInput = (@cImport(@cInclude("linux/input.h")));
        const InputEvent = LinuxInput.input_event;

        const touch_input_file = try std.fs.openFileAbsolute("/dev/input/event2", .{});
        defer touch_input_file.close();

        var event: InputEvent = undefined;
        while (true) {
            const bytes_read = try touch_input_file.read(std.mem.asBytes(&event));
            if (bytes_read == 0) {
                std.log.err("bytes_read = 0, quitting", .{});
                return;
            }

            if (bytes_read != @sizeOf(InputEvent)) {
                std.log.err("Short read {}b, expected {}b", .{ bytes_read, @sizeOf((InputEvent)) });
                break;
            }

            if (event.type == LinuxInput.EV_ABS) {
                switch (event.code) {
                    LinuxInput.ABS_MT_POSITION_X => std.debug.print("X: {}\n", .{event.value}),
                    LinuxInput.ABS_MT_POSITION_Y => std.debug.print("Y: {}\n", .{event.value}),
                    LinuxInput.ABS_MT_SLOT => std.debug.print("Slot: {}\n", .{event.value}),
                    LinuxInput.ABS_MT_TRACKING_ID => std.debug.print("Tracking ID: {}\n", .{event.value}),
                    LinuxInput.ABS_MT_PRESSURE => std.debug.print("Pressure: {}\n", .{event.value}),
                    else => {},
                }
            } else if (event.type == LinuxInput.EV_SYN) {
                std.debug.print("==== FRAME SYNC ====\n", .{});
            }
        }
    }
